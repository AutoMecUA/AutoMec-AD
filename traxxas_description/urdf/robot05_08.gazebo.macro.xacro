<?xml version="1.0"?>
<robot name="robot_gaz" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:arg name="laser_visual"  default="false"/>
  <xacro:arg name="camera_visual" default="false"/>
  <xacro:arg name="camera2_visual" default="false"/>
  <xacro:arg name="imu_visual"    default="false"/>

  <gazebo reference="imu_link">
    <sensor type="imu" name="imu">
      <always_on>true</always_on>
      <visualize>$(arg imu_visual)</visualize>
    </sensor>
    <material>Gazebo/Grey</material>
  </gazebo>

  <gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
      <bodyName>imu_link</bodyName>
      <frameName>imu_link</frameName>
      <topicName>imu</topicName>
      <serviceName>imu_service</serviceName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>200</updateRate>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </plugin>
  </gazebo>

<!--link : https://www.raspberrypi.org/documentation/hardware/camera/-->
  <gazebo reference="camera_rgb_frame">
    <sensor type="camera" name="Pi Camera">
      <always_on>true</always_on>
      <visualize>$(arg camera_visual)</visualize>
      <camera>
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
             <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>camera</cameraName>
        <frameName>camera_rgb_optical_frame</frameName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="camera2_rgb_frame">
    <sensor type="camera" name="Pi Camera">
      <always_on>true</always_on>
      <visualize>$(arg camera_visual)</visualize>
      <camera>
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
             <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>camera2</cameraName>
        <frameName>camera2_rgb_optical_frame</frameName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>


  <gazebo reference="cameral_rgb_frame">
    <sensor type="camera" name="Pi Camera">
      <always_on>true</always_on>
      <visualize>$(arg camera_visual)</visualize>
      <camera>
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
             <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>cameral</cameraName>
        <frameName>cameral_rgb_optical_frame</frameName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="camerar_rgb_frame">
    <sensor type="camera" name="Pi Camera">
      <always_on>true</always_on>
      <visualize>$(arg camera_visual)</visualize>
      <camera>
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
             <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>camerar</cameraName>
        <frameName>camerar_rgb_optical_frame</frameName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>


<gazebo reference="kinect_optical_frame">
    <sensor name="kinect" type="depth">
        <!-- openni plugin has the x pointing towards the scene, so rotate to have z -->
        <pose frame="world">0.0 0.0 0.0 -1.5708 0.0 1.5708</pose>
        <camera>
            <horizontal_fov>0.74839718</horizontal_fov>
            <image>
                <width>1280</width>
                <height>1024</height>
                <format>L_INT8</format>
            </image>
            <clip>
                <near>0.1</near>
                <far>10.0</far>
            </clip>
            <noise>
                <type>gaussian</type>
                <mean>0.5</mean>
                <stddev>1.0</stddev>
            </noise>
        </camera>
        <plugin name="kinect_plugin" filename="libgazebo_ros_openni_kinect.so">
            <baseline>0.1</baseline>
            <alwaysOn>true</alwaysOn>
            <!-- Keep this zero, update_rate in the parent <sensor> tag
            will control the frame rate. -->
            <updateRate>0.0</updateRate>
            <cameraName>kinect_test</cameraName>
            <imageTopicName>/3d_image/image_raw</imageTopicName>
            <cameraInfoTopicName>/3d_image/camera_info</cameraInfoTopicName>
            <depthImageTopicName>/3d_image/image_raw_depth</depthImageTopicName>
            <depthImageInfoTopicName>/3d_image/camera_info</depthImageInfoTopicName>
            <pointCloudTopicName>/3d_image/3d_cloud</pointCloudTopicName>
            <frameName>kinect_optical_frame1</frameName>
            <pointCloudCutoff>0.5</pointCloudCutoff>
            <pointCloudCutoffMax>2.0</pointCloudCutoffMax>
        </plugin>
        <always_on>true</always_on>
        <update_rate>1.0</update_rate>
    </sensor>
</gazebo>

<gazebo reference="kinect2_optical_frame">
    <sensor name="kinect2" type="depth">
        <!-- openni plugin has the x pointing towards the scene, so rotate to have z -->
        <pose frame="world">0.0 0.0 0.0 -1.5708 0.0 1.5708</pose>
        <camera>
            <horizontal_fov>0.74839718</horizontal_fov>
            <image>
                <width>1280</width>
                <height>1024</height>
                <format>L_INT8</format>
            </image>
            <clip>
                <near>0.1</near>
                <far>10.0</far>
            </clip>
            <noise>
                <type>gaussian</type>
                <mean>0.5</mean>
                <stddev>1.0</stddev>
            </noise>
        </camera>
        <plugin name="kinect_plugin" filename="libgazebo_ros_openni_kinect.so">
            <baseline>0.1</baseline>
            <alwaysOn>true</alwaysOn>
            <!-- Keep this zero, update_rate in the parent <sensor> tag
            will control the frame rate. -->
            <updateRate>0.0</updateRate>
            <cameraName>kinect_test2</cameraName>
            <imageTopicName>/3d_image2/image_raw</imageTopicName>
            <cameraInfoTopicName>/3d_image2/camera_info</cameraInfoTopicName>
            <depthImageTopicName>/3d_image2/image_raw_depth</depthImageTopicName>
            <depthImageInfoTopicName>/3d_image2/camera_info</depthImageInfoTopicName>
            <pointCloudTopicName>/3d_image2/3d_cloud</pointCloudTopicName>
            <frameName>kinect2_optical_frame1</frameName>
            <pointCloudCutoff>0.5</pointCloudCutoff>
            <pointCloudCutoffMax>2.0</pointCloudCutoffMax>
        </plugin>
        <always_on>true</always_on>
        <update_rate>1.0</update_rate>
    </sensor>
</gazebo>



</robot>
